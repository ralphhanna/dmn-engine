$Condition
"text"'
$Tests
$mask
#aaaa##
$Tree
0->Root              #0                                     
1-->Literal          #1   text                              

$Condition
'"text"'
$Tests
$mask
#aaaa##
$maskDiff
 X   X X
$newMask
##aaaa##
$Tree
0->Root              #0                                     
1-->Literal          #1   "text"                            

$Condition
"text"
$Tests
$mask
#aaaa#
$Tree
0->Root              #0                                     
1-->Literal          #1   text                              

$Condition
"te'xt"
$Tests
$mask
#aa#aa#
$Tree
0->Root              #0                                     
1-->Literal          #1   te'xt                             

$Condition
'te"xt'
$Tests
$mask
#aa#aa#
$Tree
0->Root              #0                                     
1-->Literal          #1   te"xt                             

$Condition
-
$Tests
$mask
#
$Tree
0->True              #0                                     

$Condition
(in (abc,'xyz-abc') and 2 > 1 )
$Tests
$mask
#aa #aaa##aaa#aaa## aaa N # N #
$Tree
0->Root              #0                                     
1-->Bracket          #1   (                                 
2--->Binary          #8   and                               
3---->Call           #2   in                                
4----->Bracket       #3   (                                 
5------>Call         #4   abc                               
6------->Operator    #5   ,                                 
5------>Literal      #6   xyz-abc                           
3---->Literal        #9   2                                 
2--->Operator        #10  >                                 
3---->Literal        #11  1                                 

$Condition
not 3
$Tests
$mask
aaa N
$Tree
0->Root              #0                                     
1-->Binary           #1   not                               
2--->Literal         #2   3                                 

$Condition
(in (abc,'xyz-abc') and  > 1 )
$Tests
$mask
#aa #aaa##aaa#aaa## aaa  # N #
$Tree
0->Root              #0                                     
1-->Bracket          #1   (                                 
2--->Binary          #8   and                               
3---->Call           #2   in                                
4----->Bracket       #3   (                                 
5------>Call         #4   abc                               
6------->Operator    #5   ,                                 
5------>Literal      #6   xyz-abc                           
3---->Operator       #9   >                                 
4----->Literal       #10  1                                 

$Expression
(4 + 3 - 1) * 10 ^2
$Tests
600
$mask
#N # N # N# # NN #N
$Tree
0->Root              #0                                     result=<600>   
1-->Operator         #8   *                                 result=<600>   
2--->Bracket         #1   (                                 result=<6>   
3---->Operator       #3   +                                 result=<6>   
4----->Literal       #2   4                                 
4----->Operator      #5   -                                 result=<2>   
5------>Literal      #4   3                                 
5------>Literal      #6   1                                 
2--->Operator        #10  ^                                 result=<100>   
3---->Literal        #9   10                                
3---->Literal        #11  2                                 

$Expression
4 + 3 - 1 * 10 ^2
$Tests
$mask
N # N # N # NN #N
$Tree
0->Root              #0                                     
1-->Operator         #2   +                                 
2--->Literal         #1   4                                 
2--->Operator        #4   -                                 
3---->Literal        #3   3                                 
3---->Operator       #6   *                                 
4----->Literal       #5   1                                 
4----->Operator      #8   ^                                 
5------>Literal      #7   10                                
5------>Literal      #9   2                                 

$Expression
'qouted string with $ / \ _ +'
$Tests
$mask
#aaaaaa aaaaaa aaaa # # # a ##
$Tree
0->Root              #0                                     
1-->Literal          #1   qouted string with $ / \ _ +      
$Expression
3+5
$Tests
8
$mask
N#N
$Tree
0->Root              #0                                     result=<8>   
1-->Operator         #2   +                                 result=<8>   
2--->Literal         #1   3                                 
2--->Literal         #3   5                                 

