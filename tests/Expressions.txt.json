[
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Call         #4   abc                               ",
      "6------->Operator    #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Operator       #9   >                                 ",
      "4----->Literal       #10  1                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Literal         #2   abc                               ",
      "2--->Call            #3   in                                ",
      "3---->Bracket        #4   (                                 ",
      "4----->Text          #5   abc                               ",
      "4----->Operator      #6   ,                                 ",
      "4----->Literal       #7   xyz-abc                           "
    ],
    "tests": [],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "('abc' in (abc,'xyz-abc'))",
    "mask": "#aa #aaa##aaa#aaa## aaa  # N #",
    "newMask": "##aaa# aa #aaa##aaa#aaa###",
    "maskDiff": " X XXXX XXX  XXX XXX   XX "
  },
  {
    "tree": [
      "0->Root              #0                                     result=<600>   ",
      "1-->Operator         #8   *                                 result=<600>   ",
      "2--->Bracket         #1   (                                 result=<6>   ",
      "3---->Operator       #3   +                                 result=<6>   ",
      "4----->Literal       #2   4                                 ",
      "4----->Operator      #5   -                                 result=<2>   ",
      "5------>Literal      #4   3                                 ",
      "5------>Literal      #6   1                                 ",
      "2--->Operator        #10  ^                                 result=<100>   ",
      "3---->Literal        #9   10                                ",
      "3---->Literal        #11  2                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<600>   ",
      "1-->Operator         #8   *                                 result=<600>   ",
      "2--->Bracket         #1   (                                 result=<6>   ",
      "3---->Operator       #3   +                                 result=<6>   ",
      "4----->Number        #2   4                                 result=<4>   ",
      "4----->Operator      #5   -                                 result=<2>   ",
      "5------>Number       #4   3                                 result=<3>   ",
      "5------>Number       #6   1                                 result=<1>   ",
      "2--->Operator        #10  ^                                 result=<100>   ",
      "3---->Number         #9   10                                result=<10>   ",
      "3---->Number         #11  2                                 result=<2>   "
    ],
    "tests": [
      "600"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      ""
    ],
    "expr": "(4 + 3 - 1) * 10 ^2",
    "mask": "#N # N # N# # NN #N",
    "newMask": "#N # N # N# # NN #N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Operator         #2   +                                 ",
      "2--->Literal         #1   4                                 ",
      "2--->Operator        #4   -                                 ",
      "3---->Literal        #3   3                                 ",
      "3---->Operator       #6   *                                 ",
      "4----->Literal       #5   1                                 ",
      "4----->Operator      #8   ^                                 ",
      "5------>Literal      #7   10                                ",
      "5------>Literal      #9   2                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Operator         #2   +                                 ",
      "2--->Number          #1   4                                 ",
      "2--->Operator        #4   -                                 ",
      "3---->Number         #3   3                                 ",
      "3---->Operator       #6   *                                 ",
      "4----->Number        #5   1                                 ",
      "4----->Operator      #8   ^                                 ",
      "5------>Number       #7   10                                ",
      "5------>Number       #9   2                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      ""
    ],
    "expr": "4 + 3 - 1 * 10 ^2",
    "mask": "N # N # N # NN #N",
    "newMask": "N # N # N # NN #N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   +                                 result=<8>   ",
      "2--->Literal         #1   3                                 ",
      "2--->Literal         #3   5                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   +                                 result=<8>   ",
      "2--->Number          #1   3                                 result=<3>   ",
      "2--->Number          #3   5                                 result=<5>   "
    ],
    "tests": [
      "8"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      ""
    ],
    "expr": "3+5",
    "mask": "N#N",
    "newMask": "N#N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Operator         #1   >                                 result=<true>   ",
      "2--->Literal         #2   20                                "
    ],
    "newTree": [],
    "tests": [
      "false"
    ],
    "errors": [
      "Error Operator > requires a left parameter"
    ],
    "type": "Expression",
    "comments": [
      "",
      ""
    ],
    "expr": ">20",
    "mask": "#NN"
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Binary           #3   and                               ",
      "2--->Operator        #1   >                                 ",
      "3---->Literal        #2   30                                ",
      "2--->Operator        #4   <                                 result=<true>   ",
      "3---->Literal        #5   50                                "
    ],
    "newTree": [],
    "tests": [
      "false"
    ],
    "errors": [
      "Error Operator > requires a left parameter"
    ],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": ">30 and < 50",
    "mask": "#NN aaa # NN"
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Binary           #3   or                                result=<true>   ",
      "2--->Operator        #1   >                                 ",
      "3---->Literal        #2   200                               ",
      "2--->Operator        #4   <                                 result=<true>   ",
      "3---->Literal        #5   500                               "
    ],
    "newTree": [],
    "tests": [
      "true"
    ],
    "errors": [
      "Error Operator > requires a left parameter"
    ],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "> 200 or < 500",
    "mask": "# NNN aa # NNN"
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   50                                "
    ],
    "newTree": [
      "0->Root              #0                                     result=<50>   ",
      "1-->Number           #1   50                                result=<50>   "
    ],
    "tests": [
      "50"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "50",
    "mask": "NN",
    "newMask": "NN",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Operator         #2   +                                 result=<55>   ",
      "2--->Literal         #1   20                                ",
      "2--->Literal         #3   35                                "
    ],
    "newTree": [
      "0->Root              #0                                     result=<55>   ",
      "1-->Operator         #2   +                                 result=<55>   ",
      "2--->Number          #1   20                                result=<20>   ",
      "2--->Number          #3   35                                result=<35>   "
    ],
    "tests": [
      "55"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "20+35",
    "mask": "NN#NN",
    "newMask": "NN#NN",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Binary           #3   or                                result=<true>   ",
      "2--->Operator        #1   >                                 ",
      "3---->Literal        #2   200                               ",
      "2--->Operator        #4   <                                 result=<true>   ",
      "3---->Literal        #5   500                               "
    ],
    "newTree": [],
    "tests": [
      "true"
    ],
    "errors": [
      "Error Operator > requires a left parameter"
    ],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "> 200 or < 500",
    "mask": "# NNN aa # NNN"
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Literal          #1   High                              result=<true>   "
    ],
    "newTree": [
      "0->Root              #0                                     result=<High>   ",
      "1-->Literal          #1   High                              result=<High>   "
    ],
    "tests": [
      "'High'"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "'High'",
    "mask": "#aaaa#",
    "newMask": "#aaaa#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   High                              "
    ],
    "newTree": [
      "0->Root              #0                                     result=<Low>   ",
      "1-->Literal          #1   Low                               result=<Low>   "
    ],
    "tests": [
      "'Low'"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "'Low'",
    "mask": "#aaaa#",
    "newMask": "#aaa#",
    "maskDiff": "    X"
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Call             #1   in                                result=<true>   ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           "
    ],
    "newTree": [
      "0->Root              #0                                     result=<abc>   ",
      "1-->Literal          #1   abc                               result=<abc>   ",
      "1-->Call             #2   in                                ",
      "2--->Bracket         #3   (                                 ",
      "3---->Literal        #4   abc                               ",
      "3---->Operator       #5   ,                                 ",
      "3---->Literal        #6   xyz-abc                           "
    ],
    "tests": [
      "true    "
    ],
    "errors": [
      "***Error -'abc' in ('abc','xyz-abc') result: abc expecting:true"
    ],
    "type": "Expression",
    "comments": [
      "",
      "",
      "",
      "",
      ""
    ],
    "expr": "'abc' in ('abc','xyz-abc')",
    "mask": "#aa ##aaa###aaa#aaa##",
    "newMask": "#aaa# aa ##aaa###aaa#aaa##",
    "maskDiff": "   X X  X  X  X X  X XXXXX"
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Binary           #9   and                               result=<true>   ",
      "2--->Bracket         #1   (                                 result=<true>   ",
      "3---->Call           #2   in                                result=<true>   ",
      "4----->Bracket       #3   (                                 ",
      "5------>Literal      #4   abc                               ",
      "5------>Operator     #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "2--->Call            #10  startsWith                        result=<true>   ",
      "3---->Bracket        #11  (                                 ",
      "4----->Literal       #12  a                                 "
    ],
    "newTree": [],
    "tests": [
      "'abc', true    "
    ],
    "errors": [
      "Cannot read property 'startsWith' of null"
    ],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "(in ('abc','xyz-abc') ) and startsWith('a')",
    "mask": "#aa ##aaa###aaa#aaa## # aaa aaaaaaaaaa##a##",
    "newMask": "#aa ##aaa###aaa#aaa## # aaa aaaaaaaaaa##a##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Call             #1   in                                result=<true>   ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           ",
      "3---->Operator       #6   ,                                 ",
      "3---->Literal        #7   another entry                     ",
      "3---->Operator       #8   ,                                 ",
      "3---->Literal        #9   9                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Call             #1   in                                ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               result=<abc>   ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           result=<xyz-abc>   ",
      "3---->Operator       #6   ,                                 ",
      "3---->Literal        #7   another entry                     result=<another entry>   ",
      "3---->Operator       #8   ,                                 ",
      "3---->Number         #9   9                                 result=<9>   "
    ],
    "tests": [
      "\"abc\",true"
    ],
    "errors": [
      "***Error -in ('abc','xyz-abc','another entry', 9) result: false expecting:abc"
    ],
    "type": "Expression",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "in ('abc','xyz-abc','another entry', 9)",
    "mask": "aa ##aaa###aaa#aaa###aaaaaaa aaaaa## N#",
    "newMask": "aa ##aaa###aaa#aaa###aaaaaaa aaaaa## N#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Bracket          #1   (                                 result=<5>   ",
      "2--->Operator        #3   +                                 result=<5>   ",
      "3---->Literal        #2   2                                 ",
      "3---->Literal        #4   3                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<5>   ",
      "1-->Bracket          #1   (                                 result=<5>   ",
      "2--->Operator        #3   +                                 result=<5>   ",
      "3---->Number         #2   2                                 result=<2>   ",
      "3---->Number         #4   3                                 result=<3>   "
    ],
    "tests": [
      "5, true    "
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "(2+3)",
    "mask": "#N#N#",
    "newMask": "#N#N#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Operator         #2   +                                 result=<5>   ",
      "2--->Literal         #1   2                                 ",
      "2--->Literal         #3   3                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<5>   ",
      "1-->Operator         #2   +                                 result=<5>   ",
      "2--->Number          #1   2                                 result=<2>   ",
      "2--->Number          #3   3                                 result=<3>   "
    ],
    "tests": [
      "5, true    "
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "2+3",
    "mask": "N#N",
    "newMask": "N#N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Operator         #2   *                                 result=<8>   ",
      "2--->Literal         #1   2                                 ",
      "2--->Literal         #3   4                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   *                                 result=<8>   ",
      "2--->Number          #1   2                                 result=<2>   ",
      "2--->Number          #3   4                                 result=<4>   "
    ],
    "tests": [
      "8, true    "
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "2*4",
    "mask": "N#N",
    "newMask": "N#N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Operator         #6   *                                 result=<20>   ",
      "2--->Bracket         #1   (                                 result=<5>   ",
      "3---->Operator       #3   +                                 result=<5>   ",
      "4----->Literal       #2   2                                 ",
      "4----->Literal       #4   3                                 ",
      "2--->Literal         #7   4                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<20>   ",
      "1-->Operator         #6   *                                 result=<20>   ",
      "2--->Bracket         #1   (                                 result=<5>   ",
      "3---->Operator       #3   +                                 result=<5>   ",
      "4----->Number        #2   2                                 result=<2>   ",
      "4----->Number        #4   3                                 result=<3>   ",
      "2--->Number          #7   4                                 result=<4>   "
    ],
    "tests": [
      "20, true    "
    ],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      "",
      "",
      ""
    ],
    "expr": "(2+3)*4",
    "mask": "#N#N##N",
    "newMask": "#N#N##N",
    "maskDiff": ""
  }
]