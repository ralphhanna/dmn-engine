[
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   text                              "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "\"text\"'",
    "mask": "#aaaa##",
    "newMask": "#aaaa##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   \"text\"                            "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "'\"text\"'",
    "mask": "#aaaa##",
    "newMask": "##aaaa##",
    "maskDiff": " X   X X"
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   text                              "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "\"text\"",
    "mask": "#aaaa#",
    "newMask": "#aaaa#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   te'xt                             "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "\"te'xt\"",
    "mask": "#aa#aa#",
    "newMask": "#aa#aa#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   te\"xt                             "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "'te\"xt'",
    "mask": "#aa#aa#",
    "newMask": "#aa#aa#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->True              #0                                     "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "-",
    "mask": "#",
    "newMask": "#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Call         #4   abc                               ",
      "6------->Operator    #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Literal        #9   2                                 ",
      "2--->Operator        #10  >                                 ",
      "3---->Literal        #11  1                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Text         #4   abc                               ",
      "5------>Operator     #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Number         #9   2                                 ",
      "2--->Operator        #10  >                                 ",
      "3---->Text           #13  $$VALUE                           ",
      "3---->Number         #11  1                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "(in (abc,'xyz-abc') and 2 > 1 )",
    "mask": "#aa #aaa##aaa#aaa## aaa N # N #",
    "newMask": "#aa #aaa##aaa#aaa## aaa N # N #",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Binary           #1   not                               ",
      "2--->Literal         #2   3                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Binary           #1   not                               ",
      "2--->Text            #3   $$VALUE                           ",
      "2--->Number          #2   3                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "not 3",
    "mask": "aaa N",
    "newMask": "aaa N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Call         #4   abc                               ",
      "6------->Operator    #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Operator       #9   >                                 ",
      "4----->Literal       #10  1                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Text         #4   abc                               ",
      "5------>Operator     #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Operator       #9   >                                 ",
      "4----->Text          #12  $$VALUE                           ",
      "4----->Number        #10  1                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [],
    "expr": "(in (abc,'xyz-abc') and  > 1 )",
    "mask": "#aa #aaa##aaa#aaa## aaa  # N #",
    "newMask": "#aa #aaa##aaa#aaa## aaa  # N #",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<600>   ",
      "1-->Operator         #8   *                                 result=<600>   ",
      "2--->Bracket         #1   (                                 result=<6>   ",
      "3---->Operator       #3   +                                 result=<6>   ",
      "4----->Literal       #2   4                                 ",
      "4----->Operator      #5   -                                 result=<2>   ",
      "5------>Literal      #4   3                                 ",
      "5------>Literal      #6   1                                 ",
      "2--->Operator        #10  ^                                 result=<100>   ",
      "3---->Literal        #9   10                                ",
      "3---->Literal        #11  2                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<600>   ",
      "1-->Operator         #8   *                                 result=<600>   ",
      "2--->Bracket         #1   (                                 result=<6>   ",
      "3---->Operator       #3   +                                 result=<6>   ",
      "4----->Number        #2   4                                 result=<4>   ",
      "4----->Operator      #5   -                                 result=<2>   ",
      "5------>Number       #4   3                                 result=<3>   ",
      "5------>Number       #6   1                                 result=<1>   ",
      "2--->Operator        #10  ^                                 result=<100>   ",
      "3---->Number         #9   10                                result=<10>   ",
      "3---->Number         #11  2                                 result=<2>   "
    ],
    "tests": [
      "600"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [],
    "expr": "(4 + 3 - 1) * 10 ^2",
    "mask": "#N # N # N# # NN #N",
    "newMask": "#N # N # N# # NN #N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Operator         #2   +                                 ",
      "2--->Literal         #1   4                                 ",
      "2--->Operator        #4   -                                 ",
      "3---->Literal        #3   3                                 ",
      "3---->Operator       #6   *                                 ",
      "4----->Literal       #5   1                                 ",
      "4----->Operator      #8   ^                                 ",
      "5------>Literal      #7   10                                ",
      "5------>Literal      #9   2                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Operator         #2   +                                 ",
      "2--->Number          #1   4                                 ",
      "2--->Operator        #4   -                                 ",
      "3---->Number         #3   3                                 ",
      "3---->Operator       #6   *                                 ",
      "4----->Number        #5   1                                 ",
      "4----->Operator      #8   ^                                 ",
      "5------>Number       #7   10                                ",
      "5------>Number       #9   2                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Expression",
    "comments": [],
    "expr": "4 + 3 - 1 * 10 ^2",
    "mask": "N # N # N # NN #N",
    "newMask": "N # N # N # NN #N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   qouted string with $ / \\ _ +      "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Expression",
    "comments": [],
    "expr": "'qouted string with $ / \\ _ +'",
    "mask": "#aaaaaa aaaaaa aaaa # # # a ##",
    "newMask": "#aaaaaa aaaaaa aaaa # # # a ##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   +                                 result=<8>   ",
      "2--->Literal         #1   3                                 ",
      "2--->Literal         #3   5                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   +                                 result=<8>   ",
      "2--->Number          #1   3                                 result=<3>   ",
      "2--->Number          #3   5                                 result=<5>   "
    ],
    "tests": [
      "8"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [],
    "expr": "3+5",
    "mask": "N#N",
    "newMask": "N#N",
    "maskDiff": ""
  }
]