[
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Call         #4   abc                               ",
      "6------->Operator    #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Literal        #9   2                                 ",
      "2--->Operator        #10  >                                 ",
      "3---->Literal        #11  1                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Text            #2   in                                ",
      "1-->Bracket          #3   (                                 ",
      "2--->Literal         #4   abc                               ",
      "2--->Operator        #5   ,                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Literal        #6   xyz-abc                           ",
      "3---->Number         #9   2                                 ",
      "2--->Operator        #10  >                                 ",
      "3---->Text           #13  $$VALUE                           ",
      "3---->Number         #11  1                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "(in ('abc','xyz-abc') and 2 > 1 )",
    "mask": "#aa #aaa##aaa#aaa## aaa N # N #",
    "newMask": "#aa ##aaa###aaa#aaa## aaa N # N #",
    "maskDiff": "     X  X XX X X XXXXX XX X X XXX"
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   abc                               ",
      "1-->Operator         #2   ,                                 ",
      "1-->Text             #3   true                              "
    ],
    "newTree": [
      "0->Root              #0                                     result=<abc>   ",
      "1-->Literal          #1   abc                               result=<abc>   "
    ],
    "tests": [
      "'abc',true"
    ],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "'abc'",
    "mask": "#aaa## aaaa   ",
    "newMask": "#aaa#",
    "maskDiff": "     "
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Call         #4   abc                               ",
      "6------->Operator    #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "3---->Operator       #9   >                                 ",
      "4----->Literal       #10  1                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Text            #2   in                                ",
      "1-->Bracket          #3   (                                 ",
      "2--->Text            #4   abc                               ",
      "2--->Operator        #5   ,                                 ",
      "2--->Binary          #8   and                               ",
      "3---->Literal        #6   xyz-abc                           ",
      "3---->Operator       #9   >                                 ",
      "4----->Text          #12  $$VALUE                           ",
      "4----->Number        #10  1                                 "
    ],
    "tests": [],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "(in (abc,'xyz-abc') and  > 1 )",
    "mask": "#aa #aaa##aaa#aaa## aaa  # N #",
    "newMask": "#aa #aaa##aaa#aaa## aaa  # N #",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   qouted string with $ / \\ _ +      "
    ],
    "newTree": [],
    "tests": [],
    "errors": [],
    "type": "Expression",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "'qouted string with $ / \\ _ +'",
    "mask": "#aaaaaa aaaaaa aaaa # # # a ##",
    "newMask": "#aaaaaa aaaaaa aaaa # # # a ##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   +                                 result=<8>   ",
      "2--->Literal         #1   3                                 ",
      "2--->Literal         #3   5                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<8>   ",
      "1-->Operator         #2   +                                 result=<8>   ",
      "2--->Number          #1   3                                 result=<3>   ",
      "2--->Number          #3   5                                 result=<5>   "
    ],
    "tests": [
      "8"
    ],
    "errors": [],
    "type": "Expression",
    "comments": [],
    "expr": "3+5",
    "mask": "N#N",
    "newMask": "N#N",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Literal          #1   High                              result=<true>   "
    ],
    "newTree": [
      "0->Root              #0                                     result=<High>   ",
      "1-->Literal          #1   High                              result=<High>   "
    ],
    "tests": [
      "'High', true"
    ],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      ""
    ],
    "expr": "'High'",
    "mask": "#aaaa#",
    "newMask": "#aaaa#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Literal          #1   High                              "
    ],
    "newTree": [
      "0->Root              #0                                     result=<High>   ",
      "1-->Literal          #1   High                              result=<High>   "
    ],
    "tests": [
      "'Low', false"
    ],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "'High'",
    "mask": "#aaaa#",
    "newMask": "#aaaa#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Call             #1   in                                result=<true>   ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           "
    ],
    "newTree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Call             #1   in                                result=<true>   ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               result=<abc>   ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           result=<xyz-abc>   "
    ],
    "tests": [
      "'abc', true    "
    ],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "in ('abc','xyz-abc')",
    "mask": "aa ##aaa###aaa#aaa##",
    "newMask": "aa ##aaa###aaa#aaa##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Binary           #9   and                               result=<true>   ",
      "2--->Bracket         #1   (                                 result=<true>   ",
      "3---->Call           #2   in                                result=<true>   ",
      "4----->Bracket       #3   (                                 ",
      "5------>Literal      #4   abc                               ",
      "5------>Operator     #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           ",
      "2--->Call            #10  startsWith                        result=<true>   ",
      "3---->Bracket        #11  (                                 ",
      "4----->Literal       #12  a                                 "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Text            #2   in                                ",
      "1-->Binary           #9   and                               ",
      "2--->Bracket         #3   (                                 ",
      "3---->Literal        #4   abc                               ",
      "3---->Operator       #5   ,                                 ",
      "3---->Literal        #6   xyz-abc                           ",
      "2--->Call            #10  startsWith                        ",
      "3---->Bracket        #11  (                                 ",
      "4----->Literal       #12  a                                 "
    ],
    "tests": [
      "'abc', true    "
    ],
    "errors": [
      "***Error -(in ('abc','xyz-abc') ) and startsWith('a') for abc result: false expecting:<true>"
    ],
    "type": "Condition",
    "comments": [
      "",
      "",
      ""
    ],
    "expr": "(in ('abc','xyz-abc') ) and startsWith('a')",
    "mask": "#aa ##aaa###aaa#aaa## # aaa aaaaaaaaaa##a##",
    "newMask": "#aa ##aaa###aaa#aaa## # aaa aaaaaaaaaa##a##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Call             #1   in                                result=<true>   ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           ",
      "3---->Operator       #6   ,                                 ",
      "3---->Literal        #7   another entry                     ",
      "3---->Operator       #8   ,                                 ",
      "3---->Literal        #9   9                                 "
    ],
    "newTree": [
      "0->Root              #0                                     result=<true>   ",
      "1-->Call             #1   in                                result=<true>   ",
      "2--->Bracket         #2   (                                 ",
      "3---->Literal        #3   abc                               result=<abc>   ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           result=<xyz-abc>   ",
      "3---->Operator       #6   ,                                 ",
      "3---->Literal        #7   another entry                     result=<another entry>   ",
      "3---->Operator       #8   ,                                 ",
      "3---->Number         #9   9                                 result=<9>   "
    ],
    "tests": [
      "\"abc\",true"
    ],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "in ('abc','xyz-abc','another entry', 9)",
    "mask": "aa ##aaa###aaa#aaa###aaaaaaa aaaaa## N#",
    "newMask": "aa ##aaa###aaa#aaa###aaaaaaa aaaaa## N#",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Binary           #9   and                               ",
      "2--->Bracket         #1   (                                 ",
      "3---->Call           #2   in                                ",
      "4----->Bracket       #3   (                                 ",
      "5------>Text         #4   abc                               ",
      "5------>Operator     #5   ,                                 ",
      "5------>Literal      #6   xyz-abc                           result=<xyz-abc>   ",
      "2--->Call            #10  startsWith                        result=<true>   ",
      "3---->Bracket        #11  (                                 ",
      "4----->Literal       #12  a                                 result=<a>   "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Bracket          #1   (                                 ",
      "2--->Text            #2   in                                ",
      "1-->Binary           #9   and                               ",
      "2--->Bracket         #3   (                                 ",
      "3---->Literal        #4   abc                               ",
      "3---->Operator       #5   ,                                 ",
      "3---->Literal        #6   xyz-abc                           ",
      "2--->Call            #10  startsWith                        ",
      "3---->Bracket        #11  (                                 ",
      "4----->Literal       #12  a                                 "
    ],
    "tests": [
      "'abc', true    "
    ],
    "errors": [
      "***Error -(in ('abc','xyz-abc') ) and startsWith('a') for abc result: false expecting:<true>"
    ],
    "type": "Condition",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "(in ('abc','xyz-abc') ) and startsWith('a')",
    "mask": "#aa #aaa##aaa#aaa## # aaa aaaaaaaaaa##a##",
    "newMask": "#aa ##aaa###aaa#aaa## # aaa aaaaaaaaaa##a##",
    "maskDiff": "     X  X XX X X XXX  XX X X        XXX XXX"
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Call             #1   in                                ",
      "2--->Bracket         #2   (                                 ",
      "3---->Call           #3   abc                               ",
      "4----->Operator      #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           ",
      "3---->Operator       #6   ,                                 ",
      "3---->Literal        #7   another entry                     "
    ],
    "newTree": [
      "0->Root              #0                                     ",
      "1-->Call             #1   in                                ",
      "2--->Bracket         #2   (                                 ",
      "3---->Text           #3   abc                               ",
      "3---->Operator       #4   ,                                 ",
      "3---->Literal        #5   xyz-abc                           ",
      "3---->Operator       #6   ,                                 ",
      "3---->Literal        #7   another entry                     "
    ],
    "tests": [
      "\"abc",
      "true"
    ],
    "errors": [],
    "type": "Condition",
    "comments": [
      "",
      "",
      "",
      ""
    ],
    "expr": "in (abc,'xyz-abc','another entry')",
    "mask": "aa #aaa##aaa#aaa###aaaaaaa aaaaa##",
    "newMask": "aa #aaa##aaa#aaa###aaaaaaa aaaaa##",
    "maskDiff": ""
  },
  {
    "tree": [
      "0->Root              #0                                     ",
      "1-->Binary           #1   not                               ",
      "2--->Text            #8   $$VALUE                           result=<axbc>   ",
      "2--->Call            #2   in                                ",
      "3---->Bracket        #3   (                                 ",
      "4----->Text          #4   abc                               ",
      "4----->Operator      #5   ,                                 ",
      "4----->Literal       #6   xyz-abc                           result=<xyz-abc>   "
    ],
    "newTree": [],
    "tests": [
      "'abc', false",
      "'axbc', true"
    ],
    "errors": [
      "***Error -not in (abc,'xyz-abc')  for axbc result: false expecting:<true>"
    ],
    "type": "Condition",
    "comments": [
      "",
      ""
    ],
    "expr": "not in (abc,'xyz-abc') ",
    "mask": "aaa aa #aaa##aaa#aaa## ",
    "newMask": "aaa aa #aaa##aaa#aaa## ",
    "maskDiff": ""
  }
]